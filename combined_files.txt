

==================== Start of: getallcode.py ====================

import os

# --- 配置 ---

# 1. 指定要包含的文件后缀名
TARGET_EXTENSIONS = ['.py', '.html', '.css', '.yaml']

# 2. 指定输出的聚合文件名
OUTPUT_FILENAME = 'combined_files.txt'

# 3. 指定要排除的目录名
EXCLUDED_DIRS = ['.git', '__pycache__', 'node_modules', '.vscode', '.venv']


# --- 脚本 ---

def combine_files():
    """
    遍历当前脚本所在目录及子目录,将指定后缀的文件内容合并到一个txt文件中。
    """

    # 获取此脚本所在的目录
    # __file__ 是 Python 的一个内置变量，表示当前执行的脚本文件的路径
    try:
        script_dir = os.path.dirname(os.path.abspath(__file__))
    except NameError:
        # 如果在 REPL 或 notebook 中运行，__file__ 可能未定义
        script_dir = os.getcwd()
        print(f"警告: 无法获取脚本路径, 使用当前工作目录: {script_dir}")

    print(f"开始在 {script_dir} 中搜索文件...")
    print(f"将排除以下目录: {', '.join(EXCLUDED_DIRS)}")

    found_files_count = 0

    # 'w' 模式会覆盖已存在的文件。确保每次运行都是一个全新的聚合文件。
    # 使用 utf-8 编码处理各种文件内容
    try:
        with open(os.path.join(script_dir, OUTPUT_FILENAME), 'w', encoding='utf-8') as outfile:

            # os.walk 会递归遍历目录
            # root: 当前目录路径
            # dirs: 当前目录下的子目录列表
            # files: 当前目录下的文件列表
            for root, dirs, files in os.walk(script_dir):

                # *** 修改点在这里 ***
                # 通过修改 dirs 列表 (dirs[:]) 来阻止 os.walk 进一步遍历这些目录
                dirs[:] = [d for d in dirs if d not in EXCLUDED_DIRS]

                for filename in files:
                    # 检查文件后缀是否在我们的目标列表中
                    if any(filename.endswith(ext) for ext in TARGET_EXTENSIONS):

                        file_path = os.path.join(root, filename)

                        # 获取相对路径，以便在输出文件中更清晰地显示
                        relative_path = os.path.relpath(file_path, script_dir)

                        # 排除输出文件本身，防止它把自己也包含进去
                        if relative_path == OUTPUT_FILENAME:
                            continue

                        print(f"  正在添加: {relative_path}")
                        found_files_count += 1

                        # 写入文件分隔符和路径
                        outfile.write(f"\n\n{'=' * 20} Start of: {relative_path} {'=' * 20}\n\n")

                        try:
                            # 以只读 ('r') 模式打开源文件
                            # 使用 errors='ignore' 来跳过无法解码的字符
                            with open(file_path, 'r', encoding='utf-8', errors='ignore') as infile:
                                content = infile.read()
                                outfile.write(content)

                        except Exception as e:
                            # 如果读取失败（例如权限问题），则记录错误
                            outfile.write(f"--- 无法读取文件: {e} ---\n")
                            print(f"  [错误] 无法读取 {relative_path}: {e}")

                        # 写入文件结束符
                        outfile.write(f"\n\n{'=' * 20} End of: {relative_path} {'=' * 20}\n\n")

        print(f"\n完成！成功聚合 {found_files_count} 个文件。")
        print(f"输出文件已保存为: {os.path.join(script_dir, OUTPUT_FILENAME)}")

    except IOError as e:
        print(f"创建输出文件时发生错误: {e}")
    except Exception as e:
        print(f"发生未知错误: {e}")


# --- 执行 ---
if __name__ == "__main__":
    combine_files()

==================== End of: getallcode.py ====================



==================== Start of: configs\tasks.yaml ====================

# FILE: configs/tasks.yaml

# ==============================================================================
# PubCrawler Task Configuration v11.0 (Refactored)
# ==============================================================================

# ------------------------------------------------------------------------------
# 1. DATA SOURCE DEFINITIONS ("The Encyclopedia")
# ------------------------------------------------------------------------------
source_definitions:
  # OpenReview 定义
  openreview:
    ICLR: { venue_id: "ICLR.cc/YYYY/Conference", api_v1_years: [2019, 2020, 2021, 2022, 2023] }
    NeurIPS: { venue_id: "NeurIPS.cc/YYYY/Conference", api_v1_years: [2019, 2020, 2021, 2022] }

  # HTML 定义
  html_cvf:
    CVPR: "https://openaccess.thecvf.com/CVPRYYYY?day=all"
    ICCV: "https://openaccess.thecvf.com/ICCVYYYY?day=all"
  html_pmlr:
    ICML: "https://proceedings.mlr.press/"
  html_acl:
    ACL: "https://aclanthology.org/volumes/YYYY.acl-long/"
    EMNLP: "https://aclanthology.org/volumes/YYYY.emnlp-main/"
    NAACL: { pattern_map: { 2019: "2019.naacl-main", 2021: "2021.naacl-main", 2022: "2022.naacl-main", 2024: "2024.naacl-long" } }

  # 其他定义
  selenium:
    AAAI: "https://aaai.org/aaai-publications/aaai-conference-proceedings/"
    KDD: "https://dl.acm.org/conference/kdd/proceedings"
  arxiv:
    API: "http://export.arxiv.org/api/query?"


# ------------------------------------------------------------------------------
# 2. TASKS TO EXECUTE ("The Battle Plan")
# ------------------------------------------------------------------------------
tasks:

  # === TPAMI: 测试最新的 5 篇 Early Access 论文 ===
  - name: 'TPAMI_Latest_Test'
    conference: 'TPAMI'
    year: 2025
    source_type: 'tpami'
    enabled: true
    punumber: '34' #


  # === ICLR: 2022 - 2026 ===
    
  - name: 'ICLR_2026'
    conference: 'ICLR'
    year: 2026
    source_type: 'iclr'
    enabled: true
    fetch_reviews: true
    download_pdfs: true

    
  - name: 'ICLR_2025'
    conference: 'ICLR'
    year: 2025
    source_type: 'iclr'
    enabled: true
    fetch_reviews: true
    download_pdfs: true

    
  - name: 'ICLR_2024'
    conference: 'ICLR'
    year: 2024
    source_type: 'iclr'
    enabled: true
    fetch_reviews: false
    download_pdfs: true

    
  - name: 'ICLR_2023'
    conference: 'ICLR'
    year: 2023
    source_type: 'iclr'
    enabled: true
    fetch_reviews: false
    download_pdfs: true

    
  - name: 'ICLR_2022'
    conference: 'ICLR'
    year: 2022
    source_type: 'iclr'
    enabled: true
    fetch_reviews: false
    download_pdfs: true


  # === NeurIPS: 2022 - 2026 ===
    
  - name: 'NeurIPS_2026'
    conference: 'NeurIPS'
    year: 2026
    source_type: 'neurips'
    enabled: true
    fetch_reviews: true
    download_pdfs: true

    
  - name: 'NeurIPS_2025'
    conference: 'NeurIPS'
    year: 2025
    source_type: 'neurips'
    enabled: true
    fetch_reviews: true
    download_pdfs: true

    
  - name: 'NeurIPS_2024'
    conference: 'NeurIPS'
    year: 2024
    source_type: 'neurips'
    enabled: true
    fetch_reviews: false
    download_pdfs: true

    
  - name: 'NeurIPS_2023'
    conference: 'NeurIPS'
    year: 2023
    source_type: 'neurips'
    enabled: true
    fetch_reviews: false
    download_pdfs: true

    
  - name: 'NeurIPS_2022'
    conference: 'NeurIPS'
    year: 2022
    source_type: 'neurips'
    enabled: true
    fetch_reviews: false
    download_pdfs: true


  # === ICML: 2022 - 2026 ===
    
  - name: 'ICML_2026'
    conference: 'ICML'
    year: 2026
    source_type: 'icml'
    enabled: true
    download_pdfs: true

    
  - name: 'ICML_2025'
    conference: 'ICML'
    year: 2025
    source_type: 'icml'
    url_override: "https://proceedings.mlr.press/v237/"
    enabled: true
    download_pdfs: true

    
  - name: 'ICML_2024'
    conference: 'ICML'
    year: 2024
    source_type: 'icml'
    url_override: "https://proceedings.mlr.press/v235/"
    enabled: true
    download_pdfs: true

    
  - name: 'ICML_2023'
    conference: 'ICML'
    year: 2023
    source_type: 'icml'
    url_override: "https://proceedings.mlr.press/v202/"
    enabled: true
    download_pdfs: true

    
  - name: 'ICML_2022'
    conference: 'ICML'
    year: 2022
    source_type: 'icml'
    url_override: "https://proceedings.mlr.press/v162/"
    enabled: true
    download_pdfs: true


  # === ACL: 2022 - 2026 ===
    
  - name: 'ACL_2026'
    conference: 'ACL'
    year: 2026
    source_type: 'acl'
    enabled: true
    download_pdfs: true

    
  - name: 'ACL_2025'
    conference: 'ACL'
    year: 2025
    source_type: 'acl'
    enabled: true
    download_pdfs: true

    
  - name: 'ACL_2024'
    conference: 'ACL'
    year: 2024
    source_type: 'acl'
    url_override: "https://aclanthology.org/volumes/2024.acl-long/"
    enabled: true
    download_pdfs: true

    
  - name: 'ACL_2023'
    conference: 'ACL'
    year: 2023
    source_type: 'acl'
    enabled: true
    download_pdfs: true

    
  - name: 'ACL_2022'
    conference: 'ACL'
    year: 2022
    source_type: 'acl'
    enabled: true
    download_pdfs: true


==================== End of: configs\tasks.yaml ====================



==================== Start of: configs\trends.yaml ====================

# FILE: configs/trends.yaml ("Flagship Edition")

# 定义AI研究领域及其子方向的关键词。这是一个全面、层级化、与时俱进的知识库。
# 关键词不区分大小写，并经过优化以提高匹配准确率。

# --- 大语言模型与基础模型 (LLMs & Foundation Models) ---
"LLMs & Foundation Models":
  keywords: ["language model", "foundation model", "llm", "large model"]
  sub_fields:
    "LLM Alignment & RLHF/DPO": ["alignment", "rlhf", "dpo", "instruction tuning", "human feedback", "constitutional ai", "preference optimization"]
    "LLM Evaluation": ["llm evaluation", "benchmark", "hallucination", "llm robustness", "truthfulness"]
    "LLM Reasoning & Planning": ["reasoning", "chain-of-thought", "tree-of-thought", "self-consistency", "planning"]
    "LLM-Based Agents": ["llm agent", "tool use", "toolformer", "react"]
    "Parameter-Efficient Fine-tuning (PEFT)": ["parameter-efficient", "peft", "lora", "qlora", "adapter tuning", "soft prompts"]
    "Retrieval-Augmented Generation (RAG)": ["retrieval-augmented", "rag", "in-context learning", "knowledge retrieval"]
    "Mixture of Experts (MoE)": ["mixture of experts", "moe", "sparse model"]
    "State Space Models (Mamba)": ["state space model", "ssm", "mamba", "s4"]
    "World Models": ["world model", "generative world model", "learning world models"]

# --- 多模态 AI (Multimodal AI) ---
"Multimodal AI":
  keywords: ["multimodal", "multi-modal", "cross-modal"]
  sub_fields:
    "Visual-Language Models (VLM)": ["visual-language", "vlm", "multi-modal llm", "vision-language", "llava", "gpt-4v"]
    "Text-to-Image Generation": ["text-to-image", "dall-e", "stable diffusion", "midjourney", "image generation"]
    "Video Generation & Editing": ["video generation", "video editing", "text-to-video", "sora", "video synthesis"]
    "Speech & Audio Generation": ["speech synthesis", "text-to-speech", "tts", "audio generation", "voice conversion"]
    "General Multimodality": ["audio-visual", "text-video", "image-audio", "speech recognition"] # 捕捉非VLM的多模态组合

# --- 计算机视觉 (CV) ---
"Computer Vision":
  keywords: ["image", "vision", "visual", "cnn", "convolutional", "scene"]
  sub_fields:
    "Diffusion Models & Generative Theory": ["diffusion model", "denoising diffusion", "score-based", "generative model"]
    "3D Vision & Gaussian Splatting": ["3d vision", "gaussian splatting", "nerf", "neural radiance", "reconstruction", "point cloud", "view synthesis"]
    "Object Detection & Segmentation": ["object detection", "segmentation", "yolo", "mask r-cnn", "instance segmentation", "panoptic"]
    "Video Understanding": ["video understanding", "action recognition", "video classification", "temporal understanding"]
    "Image Restoration": ["image restoration", "super-resolution", "denoising", "deblurring"]
    "Visual Transformers (ViT)": ["vision transformer", "vit", "visual transformer"]
    "Self-Supervised Learning (CV)": ["self-supervised", "contrastive learning", "simclr", "moco", "byol", "masked image modeling"]

# --- 自然语言处理 (NLP) ---
# Note: 很多NLP任务正被LLMs subsume，这里保留更经典的或非LLM-centric的任务
"Natural Language Processing":
  keywords: ["natural language", "nlp", "text", "corpus", "linguistic"]
  sub_fields:
    "Code Generation": ["code generation", "text-to-code", "program synthesis", "alphacode"]
    "Machine Translation": ["machine translation", "nmt", "cross-lingual"]
    "Information Extraction": ["information extraction", "named entity recognition", "ner", "relation extraction"]
    "Summarization": ["summarization", "text summarization", "abstractive", "extractive"]

# --- 强化学习 (RL) ---
"Reinforcement Learning":
  keywords: ["reinforcement learning", "rl", "q-learning", "reward", "policy", "markov decision"]
  sub_fields:
    "Reinforcement Learning (Algorithms)": ["actor-critic", "a2c", "a3c", "policy gradient", "sac", "ppo", "td3"]
    "Offline & Imitation Learning": ["offline rl", "imitation learning", "behavioral cloning", "inverse rl"]
    "Multi-Agent RL (MARL)": ["multi-agent rl", "marl", "cooperative", "competitive"]
    "Human Motion Generation": ["motion generation", "humanoid", "locomotion", "character animation"]

# --- 机器学习核心 (Core ML) ---
"Core Machine Learning":
  keywords: ["learning", "model", "network", "algorithm", "theory"]
  sub_fields:
    "Federated Learning (FL)": ["federated learning", "fl", "decentralized learning"]
    "Continual Learning": ["continual learning", "lifelong learning", "catastrophic forgetting"]
    "Transfer Learning": ["transfer learning", "domain adaptation", "fine-tuning"]
    "Meta-Learning": ["meta-learning", "learning to learn", "few-shot learning", "maml"]
    "Self-Supervised Learning (General)": ["self-supervised", "ssl", "contrastive learning"] # For non-CV applications
    "Graph Neural Networks (GNN)": ["graph neural network", "gnn", "graph representation", "message passing"]
    "Transformers & Attention": ["transformer", "attention mechanism", "self-attention"] # General, non-visual
    "Causal Discovery & Inference": ["causal discovery", "causal inference", "structural causal model", "scm", "treatment effect"]
    "Optimization Algorithms": ["optimization", "sgd", "adam", "gradient descent", "convergence", "second-order"]
    "Bayesian Methods": ["bayesian", "gaussian process", "variational inference", "probabilistic model"]
    "Quantization & Pruning": ["quantization", "pruning", "model compression", "8-bit", "4-bit", "int8", "binarization"]

# --- AI伦理、安全与可解释性 (Trustworthy AI) ---
"Trustworthy AI":
  keywords: ["trustworthy", "responsible", "ethical"]
  sub_fields:
    "Adversarial Robustness & Attacks": ["adversarial attack", "adversarial robustness", "defense", "adversarial example"]
    "Differential Privacy (DP)": ["differential privacy", "dp-sgd", "privacy-preserving", "private ml"]
    "AI Fairness & Bias": ["fairness", "bias", "algorithmic fairness", "group fairness", "debiasing"]
    "Model Interpretability (XAI)": ["interpretability", "explainable ai", "xai", "shap", "lime", "feature attribution"]
    "LLM Safety & Jailbreaking": ["llm safety", "jailbreaking", "red teaming", "model guardrails"] # LLM-specific safety

# --- AI for Science & Society ---
"AI for Science & Society":
  keywords: ["ai for", "applications", "applied ai"]
  sub_fields:
    "AI for Drug/Molecule Science": ["drug discovery", "molecule generation", "protein folding", "alphafold", "computational biology"]
    "AI for Healthcare": ["healthcare", "medical image", "ecg", "eeg", "patient data", "clinical notes", "radiology"]
    "AI for Weather & Climate": ["weather forecasting", "climate modeling", "physics-informed", "pinn"]
    "Robotics": ["robotics", "robot learning", "manipulation", "control", "embodied ai"]
    "Recommender Systems": ["recommender system", "collaborative filtering", "recommendation"]
    "AI for Chip Design (EDA)": ["chip design", "eda", "electronic design automation", "placement", "routing"]
    "Time Series Forecasting": ["time series", "forecasting", "temporal data", "sequential data"]

# --- 未来可扩展的“第三层级”结构示例 (代码暂不支持) ---
# "Example with Sub-Sub-Fields":
#  keywords: ["example"]
#  sub_fields:
#    "Generative Vision":
#      keywords: ["generative vision"]
#      sub_sub_fields:
#        "GANs": ["gan", "generative adversarial"]
#        "Diffusion Models": ["diffusion", "ddpm"]
#        "VAEs": ["variational autoencoder", "vae"]
#        "Autoregressive Models": ["pixelcnn", "imagen"]

==================== End of: configs\trends.yaml ====================



==================== Start of: src\config.py ====================

# FILE: src/config.py (应用了 Tqdm 安全日志)

import logging
import sys
from pathlib import Path

# 导入新的 Tqdm 日志处理器
from src.utils.tqdm_logger import TqdmLoggingHandler
# 保留彩色格式化器，因为它将被 Tqdm 处理器使用
from src.utils.console_logger import ColoredFormatter

# --- Project Structure ---
ROOT_DIR = Path(__file__).parent.parent
OUTPUT_DIR = ROOT_DIR / "output"
LOG_DIR = ROOT_DIR / "logs"
CONFIG_FILE = ROOT_DIR / "configs" / "tasks.yaml"
# 新增 PAPERS_OUTPUT_DIR 定义
PAPERS_OUTPUT_DIR = OUTPUT_DIR / "papers"


# --- Create Directories ---
OUTPUT_DIR.mkdir(exist_ok=True)
LOG_DIR.mkdir(exist_ok=True)
(ROOT_DIR / "configs").mkdir(exist_ok=True)
# 新增: 确保 papers 目录也存在
PAPERS_OUTPUT_DIR.mkdir(exist_ok=True) # <--- 添加这一行
# 如果您也想确保 trends 目录存在，也可以添加:
(OUTPUT_DIR / "trends").mkdir(exist_ok=True) # <--- 可选添加


# --- Logging Configuration ---
def get_logger(name: str, log_file: Path = LOG_DIR / "pubcrawler.log") -> logging.Logger:
    """Configures and returns a logger with TQDM-safe colored console output."""
    logger = logging.getLogger(name)
    if not logger.handlers:
        logger.setLevel(logging.INFO)

        # --- 核心修改点: 使用 TqdmLoggingHandler ---

        # 1. 控制台处理器 (使用 Tqdm 安全处理器和彩色格式)
        tqdm_handler = TqdmLoggingHandler()
        tqdm_handler.setLevel(logging.INFO)
        console_format = '%(message)s'
        console_formatter = ColoredFormatter(console_format)
        tqdm_handler.setFormatter(console_formatter)

        # 2. 文件处理器 (保持不变)
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        file_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        file_formatter = logging.Formatter(file_format)
        file_handler.setFormatter(file_formatter)

        logger.addHandler(tqdm_handler)
        logger.addHandler(file_handler)

        logger.propagate = False

    return logger

==================== End of: src\config.py ====================



==================== Start of: src\main.py ====================

# FILE: src/main.py

import time
import yaml
import re
import pandas as pd
from collections import defaultdict
from pathlib import Path
from tqdm import tqdm

# --- 导入所有独立的 Scraper ---
from src.scrapers.iclr_scraper import IclrScraper
from src.scrapers.neurips_scraper import NeuripsScraper
from src.scrapers.icml_scraper import IcmlScraper
from src.scrapers.acl_scraper import AclScraper
from src.scrapers.arxiv_scraper import ArxivScraper
from src.scrapers.cvf_scraper import CvfScraper
from src.scrapers.aaai_scraper import AaaiScraper
from src.scrapers.kdd_scraper import KddScraper

from src.config import get_logger, CONFIG_FILE, OUTPUT_DIR
from src.scrapers.tpami_scraper import TpamiScraper
from src.utils.formatter import save_as_csv
from src.utils.downloader import download_single_pdf
from src.analysis.trends import run_single_task_analysis, run_cross_year_analysis
from src.utils.console_logger import print_banner, COLORS

OPERATION_MODE = "collect_and_analyze"

logger = get_logger(__name__)
PAPERS_OUTPUT_DIR = OUTPUT_DIR / "papers"
TRENDS_OUTPUT_DIR = OUTPUT_DIR / "trends"

# --- 注册所有独立的 Scraper ---
SCRAPER_MAPPING = {
    # OpenReview-based
    "iclr": IclrScraper,
    "neurips": NeuripsScraper,
    # HTML-based
    "icml": IcmlScraper,
    "acl": AclScraper,
    "cvf": CvfScraper,
    # Selenium-based
    "aaai": AaaiScraper,
    "kdd": KddScraper,
    # API-based
    "arxiv": ArxivScraper,
    "tpami": TpamiScraper,
}

# --- 建立从会议到其定义源的映射 ---
CONF_TO_DEF_SOURCE = {
    'ICLR': 'openreview',
    'NeurIPS': 'openreview',
    'ICML': 'html_pmlr',
    'ACL': 'html_acl',
    'EMNLP': 'html_acl',
    'NAACL': 'html_acl',
    'CVPR': 'html_cvf',
    'ICCV': 'html_cvf',
    'AAAI': 'selenium',
    'KDD': 'selenium',

}


def load_config():
    if not CONFIG_FILE.exists():
        logger.error(f"[✖ ERROR] Config file not found at {CONFIG_FILE}")
        return None
    with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


def build_task_info(task: dict, source_definitions: dict) -> dict:
    task_info = task.copy()
    conf = task.get('conference')
    year = task.get('year')
    source_type = task.get('source_type')

    if source_type in ['arxiv', 'tpami']:
        return task_info

    if not conf or not year:
        logger.error(f"[✖ ERROR] Task '{task.get('name')}' is missing 'conference' or 'year'.")
        return None

    def_source_key = CONF_TO_DEF_SOURCE.get(conf)
    if not def_source_key:
        logger.error(f"[✖ ERROR] No definition source found for conference '{conf}'.")
        return None

    if 'url_override' not in task:
        try:
            definition = source_definitions[def_source_key][conf]
            if isinstance(definition, dict):
                if 'venue_id' in definition:
                    pattern = definition['venue_id']
                    task_info['venue_id'] = pattern.replace('YYYY', str(year))
                    task_info['api_version'] = 'v1' if year in definition.get('api_v1_years', []) else 'v2'
                elif 'pattern_map' in definition:
                    base_url = "https://aclanthology.org/"
                    pattern = definition['pattern_map'].get(year)
                    if not pattern:
                        logger.error(f"[✖ ERROR] No URL pattern defined for {conf} in year {year}");
                        return None
                    task_info['url'] = f"{base_url}{pattern}/"
            else:
                task_info['url'] = definition.replace('YYYY', str(year))
        except KeyError:
            logger.error(f"[✖ ERROR] No definition found for source='{def_source_key}' and conf='{conf}'");
            return None
    else:
        task_info['url'] = task['url_override']

    return task_info


def filter_papers(papers: list, filters: list) -> list:
    if not filters: return papers
    original_count = len(papers)
    filter_regex = re.compile('|'.join(filters), re.IGNORECASE)
    filtered_papers = [p for p in papers if filter_regex.search(p.get('title', '') + ' ' + p.get('abstract', ''))]
    logger.info(
        f"    {COLORS['STEP']}-> Filtered papers: {original_count} -> {len(filtered_papers)} using filters: {filters}")
    return filtered_papers


def collect_papers_from_tasks(tasks_to_run: list, source_definitions: dict) -> dict:
    results_by_task = defaultdict(list)
    for task in tasks_to_run:
        task_name = task.get('name', f"{task.get('conference')}_{task.get('year')}")
        if not task.get('enabled', False):
            continue

        logger.info(f"{COLORS['TASK_START']}[▶] STARTING TASK: {task_name}{COLORS['RESET']}")

        scraper_class = SCRAPER_MAPPING.get(task['source_type'])
        if not scraper_class:
            logger.error(
                f"{COLORS['ERROR']}[✖ FAILURE] No scraper registered for source_type: '{task['source_type']}'{COLORS['RESET']}\n");
            continue

        task_info = build_task_info(task, source_definitions)
        if not task_info:
            logger.error(
                f"{COLORS['ERROR']}[✖ FAILURE] Could not build task info for '{task_name}'.{COLORS['RESET']}\n");
            continue

        try:
            scraper = scraper_class(task_info, logger)
            papers = scraper.scrape()
            papers = filter_papers(papers, task.get('filters', []))

            if papers:
                for paper in papers:
                    paper['year'] = task.get('year')
                    paper['conference'] = task.get('conference')
                results_by_task[task_name] = (papers, task)
                logger.info(f"    {COLORS['STEP']}-> Successfully processed {len(papers)} papers.")
            else:
                logger.warning(f"[⚠ WARNING] No papers found for task: {task_name} (or none matched filters)")

        except Exception as e:
            logger.error(f"[✖ FAILURE] Unexpected error in task {task_name}: {e}", exc_info=True)

        if task_name in results_by_task:
            logger.info(f"{COLORS['SUCCESS']}[✔ SUCCESS] Task '{task_name}' completed.{COLORS['RESET']}\n")
        else:
            logger.info(f"{COLORS['WARNING']}[!] Task '{task_name}' finished with no results.{COLORS['RESET']}\n")
        time.sleep(0.5)

    return results_by_task


def process_and_save_results(results_by_task: dict, base_output_dir: Path, perform_single_analysis: bool):
    base_output_dir.mkdir(exist_ok=True, parents=True)
    for task_name, (papers, task_config) in results_by_task.items():
        conf, year = task_config.get('conference', 'Misc'), task_config.get('year', 'Latest')
        task_output_dir = base_output_dir / conf / str(year)
        task_output_dir.mkdir(exist_ok=True, parents=True)

        logger.info(f"    -> Saving reports for '{task_name}' to {task_output_dir}")
        save_as_csv(papers, task_name, task_output_dir)

        if task_config.get('download_pdfs', False):
            logger.info(f"    -> Starting PDF download for '{task_name}'...")
            pdf_dir = task_output_dir / "pdfs"
            pdf_dir.mkdir(exist_ok=True)
            pbar_desc = f"    -> Downloading PDFs for {task_name}"
            for paper in tqdm(papers, desc=pbar_desc, leave=True):
                download_single_pdf(paper, pdf_dir)

        if perform_single_analysis:
            analysis_output_dir = task_output_dir / "analysis"
            analysis_output_dir.mkdir(exist_ok=True)
            logger.info(f"    -> Running single-task analysis for '{task_name}'...")
            run_single_task_analysis(papers, task_name, analysis_output_dir)


def load_all_data_for_cross_analysis(papers_dir: Path) -> dict:
    if not papers_dir.exists():
        logger.error(f"[✖ ERROR] Data directory not found: {papers_dir}.");
        return {}
    all_data_by_conf = defaultdict(list)
    csv_files = list(papers_dir.rglob("*_data_*.csv"))
    if not csv_files:
        logger.warning("[⚠ WARNING] No CSV data files found for cross-year analysis.");
        return {}
    logger.info(f"    -> Loading {len(csv_files)} previously collected CSV file(s)...")
    for csv_path in csv_files:
        try:
            conference = csv_path.parent.parent.name
            df = pd.read_csv(csv_path)
            df.fillna('', inplace=True)
            if 'year' in df.columns:
                df['year'] = pd.to_numeric(df['year'], errors='coerce').astype('Int64')
            all_data_by_conf[conference].extend(df.to_dict('records'))
        except Exception as e:
            logger.error(f"[✖ ERROR] Failed to load data from {csv_path}: {e}")
    return all_data_by_conf


def main():
    print_banner()
    logger.info("=====================================================================================")
    logger.info(f"Starting PubCrawler in mode: '{OPERATION_MODE}'")
    logger.info("=====================================================================================\n")

    config = load_config()
    if not config:
        return

    if OPERATION_MODE in ["collect", "collect_and_analyze"]:
        logger.info(f"{COLORS['PHASE']}+----------------------------------------------------------+")
        logger.info(f"|    PHASE 1: PAPER COLLECTION & SINGLE-TASK ANALYSIS      |")
        logger.info(f"+----------------------------------------------------------+{COLORS['RESET']}\n")

        collected_results = collect_papers_from_tasks(config.get('tasks', []), config.get('source_definitions', {}))

        if collected_results:
            logger.info(f"{COLORS['PHASE']}--- Processing & Saving Collected Results ---{COLORS['RESET']}")
            process_and_save_results(collected_results, PAPERS_OUTPUT_DIR, perform_single_analysis=True)

    if OPERATION_MODE in ["analyze", "collect_and_analyze"]:
        logger.info(f"\n{COLORS['PHASE']}+----------------------------------------------------------+")
        logger.info(f"|          PHASE 2: CROSS-YEAR TREND ANALYSIS              |")
        logger.info(f"+----------------------------------------------------------+{COLORS['RESET']}\n")

        all_data_by_conf = load_all_data_for_cross_analysis(PAPERS_OUTPUT_DIR)

        if not all_data_by_conf:
            logger.warning("[⚠ WARNING] No data found to perform cross-year analysis.")
        else:
            for conference, papers in all_data_by_conf.items():
                if not papers: continue
                conf_trend_dir = TRENDS_OUTPUT_DIR / conference
                conf_trend_dir.mkdir(exist_ok=True, parents=True)
                logger.info(f"{COLORS['TASK_START']}[▶] Analyzing trends for: {conference}{COLORS['RESET']}")
                run_cross_year_analysis(papers, conference, conf_trend_dir)
                logger.info(
                    f"{COLORS['SUCCESS']}[✔ SUCCESS] Cross-year analysis for '{conference}' completed.{COLORS['RESET']}\n")

    logger.info("=====================================================================================")
    logger.info("PubCrawler run finished successfully.")
    logger.info("=====================================================================================")


if __name__ == "__main__":
    main()

==================== End of: src\main.py ====================



==================== Start of: src\models.py ====================

# FILE: src/models.py

from dataclasses import dataclass, field
from typing import List, Optional


@dataclass
class Paper:
    """
    一个用于存储论文信息的数据类，确保所有 scraper 返回统一的结构。
    """
    id: str
    title: str
    authors: List[str]
    summary: str
    published_date: str
    updated_date: str

    pdf_url: Optional[str] = None
    categories: List[str] = field(default_factory=list)
    primary_category: Optional[str] = None

    # 发表信息
    journal_ref: Optional[str] = None
    doi: Optional[str] = None

    # 额外备注，例如项目主页
    comment: Optional[str] = None

    # 作者及其单位的详细信息
    author_details: List[str] = field(default_factory=list)

# END OF FILE: src/models.py

==================== End of: src\models.py ====================



==================== Start of: src\processor.py ====================

# FILE: src/processor.py

import logging
import os
import requests
import zipfile
import re
from typing import Iterator, Dict, Any
from tqdm import tqdm

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


class Processor:
    """
    Processes a stream of paper data to generate output files.
    - A summary.txt file for LLM analysis.
    - A compressed .zip file containing all downloaded PDFs.
    """

    def __init__(self, output_dir: str = 'output', download_pdfs: bool = False):
        self.output_dir = output_dir
        self.download_pdfs = download_pdfs
        self.summary_path = os.path.join(self.output_dir, 'summary.txt')
        self.zip_path = os.path.join(self.output_dir, 'papers.zip')

        # Ensure output directory exists
        os.makedirs(self.output_dir, exist_ok=True)

    def _sanitize_filename(self, title: str) -> str:
        """Creates a safe filename from a paper title."""
        # Remove invalid characters
        sanitized = re.sub(r'[\\/*?:"<>|]', "", title)
        # Truncate to a reasonable length
        return (sanitized[:100] + '.pdf') if len(sanitized) > 100 else (sanitized + '.pdf')

    def _format_summary_entry(self, paper_data: Dict[str, Any]) -> str:
        """Formats a single paper's data into the specified text format."""
        # Safely get all required fields
        title = paper_data.get('title', 'N/A')
        authors = ", ".join(paper_data.get('authors', []))
        conference = paper_data.get('conference', 'N/A')
        year = paper_data.get('year', 'N/A')
        source_url = paper_data.get('source_url', 'N/A')
        pdf_link = paper_data.get('pdf_link', 'N/A')
        abstract = paper_data.get('abstract', 'No abstract available.')
        reviews = paper_data.get('reviews', [])

        # Build the entry string
        entry = []
        entry.append("=" * 80)
        entry.append(f"Title: {title}")
        entry.append(f"Authors: {authors}")
        entry.append(f"Conference: {conference} {year}")
        entry.append(f"Source URL: {source_url}")
        entry.append(f"PDF Link: {pdf_link}")
        entry.append("\n--- Abstract ---")
        entry.append(abstract)

        if reviews:
            entry.append(f"\n--- Reviews ({len(reviews)}) ---")
            for i, review in enumerate(reviews, 1):
                review_title = review.get('title', 'N/A')
                review_comment = review.get('comment', 'No comment.')
                review_decision = review.get('decision', None)
                review_rating = review.get('rating', None)

                entry.append(f"\n[Review {i}]")
                entry.append(f"Title: {review_title}")
                if review_decision:
                    entry.append(f"Decision: {review_decision}")
                if review_rating:
                    entry.append(f"Rating: {review_rating}")
                entry.append(f"Comment: {review_comment}")

        entry.append("=" * 80 + "\n\n")
        return "\n".join(entry)

    def _download_pdf(self, pdf_url: str, filename: str, zip_file: zipfile.ZipFile):
        """Downloads a PDF in streaming fashion and adds it to the zip archive."""
        if not pdf_url:
            logging.warning(f"Skipping download for '{filename}' due to missing URL.")
            return

        temp_pdf_path = os.path.join(self.output_dir, filename)
        try:
            logging.info(f"Downloading: {pdf_url}")
            with requests.get(pdf_url, stream=True, timeout=30, headers=HEADERS) as r:
                r.raise_for_status()
                with open(temp_pdf_path, 'wb') as f:
                    # Download in chunks to keep memory usage low
                    for chunk in r.iter_content(chunk_size=8192):
                        f.write(chunk)

            # Add the downloaded file to the zip archive
            zip_file.write(temp_pdf_path, arcname=filename)
            logging.info(f"Added to zip: {filename}")

        except requests.exceptions.RequestException as e:
            logging.error(f"Failed to download {pdf_url}: {e}")
        except Exception as e:
            logging.error(f"An error occurred while handling {filename}: {e}")
        finally:
            # Clean up the temporary PDF file
            if os.path.exists(temp_pdf_path):
                os.remove(temp_pdf_path)

    def process_papers(self, papers_iterator: Iterator[Dict[str, Any]], total: int):
        """
        The main processing pipeline. Iterates through papers and writes to files.
        """
        logging.info("Starting paper processing pipeline...")
        logging.info(f"Summary will be saved to: {self.summary_path}")
        if self.download_pdfs:
            logging.info(f"PDFs will be saved to: {self.zip_path}")
        else:
            logging.info("PDF download is disabled.")

        # Clear summary file at the start of a run
        with open(self.summary_path, 'w', encoding='utf-8') as f:
            f.write("--- PubCrawler Summary ---\n\n")

        try:
            with zipfile.ZipFile(self.zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                # Use tqdm for a nice progress bar
                pbar = tqdm(papers_iterator, total=total, desc="Processing papers")
                for paper_data in pbar:
                    # 1. Format and append to summary.txt
                    summary_entry = self._format_summary_entry(paper_data)
                    with open(self.summary_path, 'a', encoding='utf-8') as f:
                        f.write(summary_entry)

                    # 2. Download PDF if enabled
                    if self.download_pdfs:
                        filename = self._sanitize_filename(paper_data.get('title', 'untitled'))
                        self._download_pdf(paper_data.get('pdf_link'), filename, zipf)

        except Exception as e:
            logging.error(f"A critical error occurred during processing: {e}")

        logging.info("Processing pipeline complete.")

# END OF FILE: src/processor.py

==================== End of: src\processor.py ====================



==================== Start of: src\search_local.py ====================

# FILE: search_local.py

import pandas as pd
from pathlib import Path
import time
import textwrap

# --- 配置 ---
# 指向您的论文数据存储目录
PAPERS_DIR = Path(__file__).parent / "output" / "papers"


def load_all_papers_from_csv(directory: Path) -> pd.DataFrame:
    """
    递归加载指定目录下所有的 _data_*.csv 文件，并将它们合并成一个 DataFrame。
    """
    print(f"[*] 正在从 {directory} 加载所有论文数据...")
    csv_files = list(directory.rglob("*_data_*.csv"))

    if not csv_files:
        print(f"[!] 警告: 在目录下没有找到任何 '_data_*.csv' 文件。")
        return None

    df_list = []
    for f in csv_files:
        try:
            df = pd.read_csv(f)
            # 添加一列来记录数据来源文件，方便溯源
            df['source_file'] = f.name
            df_list.append(df)
        except Exception as e:
            print(f"[!] 错误: 加载文件 {f} 失败: {e}")

    if not df_list:
        return None

    # 合并所有的 DataFrame
    full_df = pd.concat(df_list, ignore_index=True)

    # 简单清洗，填充缺失的 'abstract' 和 'title'
    full_df['abstract'] = full_df['abstract'].fillna('')
    full_df['title'] = full_df['title'].fillna('')

    print(f"[✔] 加载完成！共找到 {len(full_df)} 篇论文记录，来自 {len(csv_files)} 个文件。")
    return full_df


def search_papers(df: pd.DataFrame, query: str):
    """
    在 DataFrame 中搜索包含查询关键词的论文。
    """
    print(f"\n[*] 正在搜索关键词: '{query}'...")
    start_time = time.time()

    # 在 'title' 和 'abstract' 两列中进行不区分大小写的搜索
    # .str.contains() 是进行子字符串匹配的核心
    results = df[
        df['title'].str.contains(query, case=False, na=False) |
        df['abstract'].str.contains(query, case=False, na=False)
        ]

    end_time = time.time()
    print(f"[✔] 搜索完成，耗时 {end_time - start_time:.4f} 秒，找到 {len(results)} 个匹配项。")

    if not results.empty:
        print("\n--- 搜索结果 ---")
        for index, row in results.iterrows():
            print(f"\n[{index + 1}] {row['title']}")
            print(f"  - 作者: {row.get('authors', 'N/A')}")
            print(f"  - 会议/期刊: {row.get('conference', 'N/A')} {row.get('year', '')}")
            # 使用 textwrap 来美化摘要的换行
            abstract = row.get('abstract', '无摘要')
            wrapped_abstract = textwrap.fill(abstract, width=100, initial_indent='  - 摘要: ', subsequent_indent='    ')
            print(wrapped_abstract)
            print(f"  - 来源文件: {row['source_file']}")
            print("-" * 20)


def main():
    """主函数"""
    paper_database = load_all_papers_from_csv(PAPERS_DIR)

    if paper_database is None:
        print("\n[✖] 无法进行搜索，因为本地数据库为空。")
        print("请先运行 'python src/main.py' 来采集论文数据。")
        return

    while True:
        try:
            # 获取用户输入
            user_query = input("\n请输入搜索关键词 (或输入 'exit' 退出): ")
            if user_query.lower() == 'exit':
                break
            if not user_query:
                continue

            search_papers(paper_database, user_query)

        except KeyboardInterrupt:
            print("\n[👋] 收到退出信号，再见！")
            break


if __name__ == "__main__":
    main()

==================== End of: src\search_local.py ====================



==================== Start of: src\__init__.py ====================

# FILE: src/__init__.py

# This file makes the 'src' directory a Python package.

# END OF FILE: src/__init__.py

==================== End of: src\__init__.py ====================



==================== Start of: src\analysis\analyzer.py ====================

# FILE: src/analysis/analyzer.py

import re
import nltk
from wordcloud import WordCloud
from collections import Counter
from pathlib import Path

# --- NLTK Data Check ---
try:
    from nltk.corpus import stopwords

    STOPWORDS = set(stopwords.words('english'))
except LookupError:
    # This block executes if the stopwords data is not found.
    # We guide the user to download it manually for reliability.
    print("-" * 80)
    print("!!! NLTK DATA NOT FOUND !!!")
    print("Required 'stopwords' data package is missing.")
    print("Please run the following command in your terminal once to download it:")
    print("\n    python -m nltk.downloader stopwords\n")
    print("-" * 80)
    # Exit gracefully instead of attempting a download, which can be unreliable.
    exit(1)

# Add custom stopwords relevant to academic papers
CUSTOM_STOPWORDS = {
    'abstract', 'paper', 'introduction', 'method', 'methods', 'results', 'conclusion',
    'propose', 'proposed', 'present', 'presents', 'show', 'demonstrate', 'model', 'models',
    'state', 'art', 'state-of-the-art', 'sota', 'approach', 'novel', 'work', 'based',
    'data', 'dataset', 'datasets', 'training', 'learning', 'network', 'networks',
    'performance', 'task', 'tasks', 'key', 'using', 'use', 'et', 'al', 'figure',
    'table', 'results', 'analysis', 'system', 'systems', 'research', 'deep', 'large',
    'also', 'however', 'framework', 'well', 'effective', 'efficient'
}
ALL_STOPWORDS = STOPWORDS.union(CUSTOM_STOPWORDS)


def clean_text(text: str) -> list:
    """Cleans and tokenizes text, removing stopwords and non-alphanumeric characters."""
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    tokens = text.split()
    return [word for word in tokens if word.isalpha() and word not in ALL_STOPWORDS and len(word) > 2]


def generate_wordcloud_from_papers(papers: list, output_path: Path) -> bool:
    """
    Generates and saves a word cloud image from the titles and abstracts of papers.
    Returns True if successful, False otherwise.
    """
    if not papers:
        return False

    # Combine all titles and abstracts into a single string
    full_text = " ".join([p.get('title', '') + " " + p.get('abstract', '') for p in papers])

    if not full_text.strip():
        print("Warning: No text available to generate word cloud.")
        return False

    word_tokens = clean_text(full_text)

    if not word_tokens:
        print("Warning: No valid words left after cleaning to generate word cloud.")
        return False

    word_freq = Counter(word_tokens)

    try:
        wc = WordCloud(width=1200, height=600, background_color="white", collocations=False).generate_from_frequencies(
            word_freq)
        wc.to_file(str(output_path))
        print(f"Word cloud generated and saved to {output_path}")
        return True
    except Exception as e:
        print(f"Error generating word cloud: {e}")
        return False

# END OF FILE: src/analysis/analyzer.py

==================== End of: src\analysis\analyzer.py ====================



==================== Start of: src\analysis\trends.py ====================

# FILE: src/analysis/trends.py

import yaml
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import matplotlib.ticker as mtick

from src.config import ROOT_DIR, get_logger

logger = get_logger(__name__)
TREND_CONFIG_FILE = ROOT_DIR / "configs" / "trends.yaml"
sns.set_theme(style="whitegrid", context="talk")
plt.rcParams['figure.dpi'] = 300


def _load_trend_config():
    if not TREND_CONFIG_FILE.exists():
        logger.error(f"Trend config file not found: {TREND_CONFIG_FILE}")
        return None
    with open(TREND_CONFIG_FILE, 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)


def _classify_paper_subfields(paper: dict, trend_config: dict) -> list:
    text = str(paper.get('title', '')) + ' ' + str(paper.get('abstract', ''))
    if not text.strip(): return []
    text = text.lower()
    matched = set()
    for field, data in trend_config.items():
        if 'sub_fields' not in data: continue
        for sub_field, keywords in data.get('sub_fields', {}).items():
            if not isinstance(keywords, list): continue
            keyword_pattern = r'\b(' + '|'.join(re.escape(k) for k in keywords) + r')\b'
            if re.search(keyword_pattern, text, re.IGNORECASE):
                matched.add(sub_field)
    return list(matched)


def _create_analysis_df(df: pd.DataFrame, trend_config: dict) -> pd.DataFrame:
    df['sub_fields'] = df.apply(lambda row: _classify_paper_subfields(row, trend_config), axis=1)
    df_exploded = df.explode('sub_fields').dropna(subset=['sub_fields'])
    if df_exploded.empty:
        return pd.DataFrame()

    stats = df_exploded.groupby('sub_fields').size().reset_index(name='paper_count')

    if 'avg_rating' in df_exploded.columns and not df_exploded['avg_rating'].isnull().all():
        avg_ratings = df_exploded.groupby('sub_fields')['avg_rating'].mean().reset_index()
        stats = pd.merge(stats, avg_ratings, on='sub_fields', how='left')

    analysis_df = stats

    if 'decision' in df_exploded.columns:
        decisions = df_exploded.groupby(['sub_fields', 'decision']).size().unstack(fill_value=0)
        analysis_df = pd.merge(analysis_df, decisions, on='sub_fields', how='left').fillna(0)

        for dtype in ['Oral', 'Spotlight', 'Poster', 'Reject', 'N/A']:
            if dtype not in analysis_df.columns:
                analysis_df[dtype] = 0

        accepted = analysis_df.get('Oral', 0) + analysis_df.get('Spotlight', 0) + analysis_df.get('Poster', 0)
        total_decision = accepted + analysis_df.get('Reject', 0)
        analysis_df['acceptance_rate'] = (accepted / total_decision.where(total_decision != 0, np.nan)).fillna(0)

    analysis_df.rename(columns={'sub_fields': 'Topic_Name'}, inplace=True)
    return analysis_df


def _plot_topic_ranking(df, metric, title, path, top_n=40):
    if metric not in df.columns:
        logger.warning(f"Metric '{metric}' not in DataFrame. Skipping plot: {title}")
        return
    df_sorted = df.dropna(subset=[metric]).sort_values(by=metric, ascending=False).head(top_n)
    if df_sorted.empty: return

    # --- 核心修复点: 为这个函数也添加最大高度限制 ---
    height = min(30, max(10, len(df_sorted) * 0.4))

    plt.figure(figsize=(16, height))
    palette = 'viridis' if metric == 'paper_count' else 'plasma_r'
    sns.barplot(x=metric, y='Topic_Name', data=df_sorted, hue='Topic_Name', palette=palette, legend=False)
    plt.title(title, fontsize=22, pad=20)
    plt.xlabel(metric.replace('_', ' ').title(), fontsize=16)
    plt.ylabel('Topic Name', fontsize=16)
    plt.yticks(fontsize=12)
    plt.tight_layout()
    plt.savefig(path)
    plt.close()


def _plot_decision_breakdown(df, title, path, top_n=40):
    if 'acceptance_rate' not in df.columns:
        logger.warning(f"Acceptance rate not available. Skipping plot: {title}")
        return
    df_sorted = df.sort_values(by='acceptance_rate', ascending=False).head(top_n)
    if df_sorted.empty: return
    cols = ['Oral', 'Spotlight', 'Poster', 'Reject', 'N/A']
    plot_data = df_sorted.set_index('Topic_Name')[[c for c in cols if c in df_sorted.columns]]
    plot_norm = plot_data.div(plot_data.sum(axis=1), axis=0)

    # --- 核心修复点: 确保这个函数也保留了最大高度限制 ---
    height = min(30, max(12, len(plot_norm) * 0.5))

    fig, ax = plt.subplots(figsize=(20, height))
    plot_norm.plot(kind='barh', stacked=True, colormap='viridis', width=0.85, ax=ax)
    count_map = df_sorted.set_index('Topic_Name')['paper_count']
    for i, name in enumerate(plot_norm.index):
        ax.text(1.01, i, f"n={count_map.get(name, 0)}", va='center', fontsize=12, fontweight='bold')
    ax.set_title(title, fontsize=24, pad=40)
    ax.set_xlabel('Proportion of Papers', fontsize=16)
    ax.set_ylabel('Topic Name (Sorted by Acceptance Rate)', fontsize=16)
    ax.xaxis.set_major_formatter(mtick.PercentFormatter(1.0))
    ax.set_xlim(0, 1)
    ax.invert_yaxis()
    ax.legend(title='Decision Type', loc='upper center', bbox_to_anchor=(0.5, 1.05), ncol=5, frameon=False)
    plt.tight_layout(rect=[0, 0, 0.95, 1])
    plt.savefig(path)
    plt.close()


def _save_summary_table(df, title, path_base, top_n=65):
    if 'acceptance_rate' not in df.columns:
        logger.warning(f"Acceptance rate not available. Skipping summary table: {title}")
        return
    df_sorted = df.sort_values(by='acceptance_rate', ascending=False).head(top_n)
    if df_sorted.empty: return
    cols = ['Topic_Name', 'paper_count', 'avg_rating', 'acceptance_rate', 'Oral', 'Spotlight', 'Poster', 'Reject',
            'N/A']
    final_table = df_sorted[[c for c in cols if c in df_sorted.columns]]
    final_table.to_csv(f"{path_base}.csv", index=False, encoding='utf-8-sig')
    styler = final_table.style.format({'avg_rating': '{:.2f}', 'acceptance_rate': '{:.2%}'}) \
        .bar(subset=['paper_count'], color='#6495ED', align='zero') \
        .bar(subset=['avg_rating'], color='#FFA07A', align='mean') \
        .background_gradient(subset=['acceptance_rate'], cmap='summer_r') \
        .set_caption(title) \
        .set_table_styles([{'selector': 'th, td', 'props': [('text-align', 'center')]}])
    with open(f"{path_base}.html", 'w', encoding='utf-8') as f:
        f.write(styler.to_html())


def _plot_cross_year_trends(df, title, path):
    df_exploded = df.explode('sub_fields').dropna(subset=['sub_fields'])
    if df_exploded.empty or df_exploded['year'].nunique() < 2:
        logger.warning(f"Skipping cross-year trend plot for '{title}': requires data from at least 2 years.")
        return
    pivot = df_exploded.groupby(['year', 'sub_fields']).size().unstack(fill_value=0)
    top_sub_fields = pivot.sum().nlargest(12).index
    pivot = pivot[top_sub_fields]
    pivot_percent = pivot.div(pivot.sum(axis=1), axis=0) * 100
    pivot_percent.sort_index(inplace=True)
    plt.figure(figsize=(16, 9))
    plt.stackplot(pivot_percent.index, pivot_percent.T.values, labels=pivot_percent.columns, alpha=0.8)
    plt.title(title, fontsize=22, weight='bold')
    plt.xlabel('Year', fontsize=16)
    plt.ylabel('Percentage of Papers (%)', fontsize=16)
    plt.xticks(pivot_percent.index.astype(int))
    plt.legend(title='Top Sub-Fields', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout(rect=[0, 0, 0.82, 1])
    plt.savefig(path)
    plt.close()


def run_single_task_analysis(papers: list, task_name: str, output_dir: Path):
    trend_config = _load_trend_config()
    if not trend_config or not papers: return

    df = pd.DataFrame(papers)
    analysis_df = _create_analysis_df(df, trend_config)
    if analysis_df.empty:
        logger.warning(f"No topics matched for {task_name}, skipping analysis plots.")
        return

    _plot_topic_ranking(analysis_df, 'paper_count', f"Topic Hotness at {task_name}", output_dir / "1_topic_hotness.png")

    has_review_data = 'avg_rating' in analysis_df.columns and 'acceptance_rate' in analysis_df.columns
    if has_review_data:
        _plot_topic_ranking(analysis_df, 'avg_rating', f"Topic Quality at {task_name}",
                            output_dir / "2_topic_quality.png")
        _plot_decision_breakdown(analysis_df, f"Decision Breakdown at {task_name}",
                                 output_dir / "3_decision_breakdown.png")
        _save_summary_table(analysis_df, f"Summary Table for {task_name}", output_dir / "4_summary_table")
    else:
        # 这个日志只会在没有审稿数据的任务中打印，是正常的
        logger.info(f"Skipping review-based analysis for {task_name}: missing review data.")

    logger.info(f"Single-task analysis for {task_name} completed.")


def run_cross_year_analysis(papers: list, conference_name: str, output_dir: Path):
    trend_config = _load_trend_config()
    if not trend_config or not papers: return

    df = pd.DataFrame(papers)
    if 'year' not in df.columns or df['year'].isnull().all():
        logger.warning(f"Skipping cross-year analysis for {conference_name}: 'year' column not found or is empty.")
        return

    df['sub_fields'] = df.apply(lambda row: _classify_paper_subfields(row, trend_config), axis=1)

    _plot_cross_year_trends(
        df,
        f"Sub-Field Trends at {conference_name} Over Time",
        output_dir / f"trends_{conference_name}.png"
    )
    logger.info(f"Cross-year analysis for {conference_name} completed.")

==================== End of: src\analysis\trends.py ====================



==================== Start of: src\analysis\__init__.py ====================

# FILE: src/analysis/__init__.py

# This file makes the 'analysis' directory a Python package.

# END OF FILE: src/analysis/__init__.py


==================== End of: src\analysis\__init__.py ====================



==================== Start of: src\scrapers\aaai_scraper.py ====================

# FILE: src/scrapers/aaai_scraper.py

import time
from typing import List, Dict, Any

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

from .base_scraper import BaseScraper


class AaaiScraper(BaseScraper):
    """专门用于 AAAI 网站的爬虫 (使用 Selenium)。"""

    def scrape(self) -> List[Dict[str, Any]]:
        url = self.task_info["url"]
        limit = self.task_info.get("limit")

        # AAAI 特定的选择器
        paper_link_selector = 'h5.toc-title > a'

        self.logger.info(f"    -> 正在启动 Selenium 访问 (AAAI): {url}")
        driver = None
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument(
                'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')

            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)

            driver.get(url)
            self.logger.info("    -> 页面已加载. 等待 10 秒以处理动态内容...")
            time.sleep(10)

            link_elements = driver.find_elements(By.CSS_SELECTOR, paper_link_selector)
            if not link_elements:
                self.logger.warning(f"    -> Selenium 未找到任何论文链接，使用的选择器是: '{paper_link_selector}'")
                return []

            self.logger.info(f"    -> 找到了 {len(link_elements)} 个潜在的论文链接。")
            if limit and len(link_elements) > limit:
                self.logger.info(f"    -> 应用限制：处理前 {limit} 个链接。")
                link_elements = link_elements[:limit]

            papers = []
            for i, link_elem in enumerate(link_elements):
                paper_url = link_elem.get_attribute('href')
                paper_title = link_elem.text
                if paper_url and paper_title:
                    papers.append({
                        'id': f"aaai_{self.task_info['year']}_{i}",
                        'title': paper_title.strip(),
                        'authors': 'N/A (AAAI Selenium)',
                        'abstract': 'N/A (AAAI Selenium)',
                        'pdf_url': None,
                        'source_url': paper_url
                    })
            return papers

        except Exception as e:
            self.logger.error(f"    [✖ ERROR] AAAI Selenium 抓取失败 {url}: {e}", exc_info=True)
            return []
        finally:
            if driver:
                driver.quit()

==================== End of: src\scrapers\aaai_scraper.py ====================



==================== Start of: src\scrapers\acl_scraper.py ====================

# FILE: src/scrapers/acl_scraper.py

import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from tqdm import tqdm
import time
from typing import List, Dict, Optional, Any
from bs4.element import Tag

from .base_scraper import BaseScraper


class AclScraper(BaseScraper):
    """专门用于 ACL Anthology 网站的爬虫。"""
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    def scrape(self) -> List[Dict[str, Any]]:
        index_url = self.task_info["url"]
        limit = self.task_info.get("limit")
        papers = []

        self.logger.info(f"    -> 正在抓取 ACL 索引页: {index_url}")
        try:
            response = requests.get(index_url, headers=self.HEADERS, timeout=20)
            if response.status_code == 404:
                self.logger.warning(f"    -> 页面未找到 (404): {index_url}")
                return []
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'lxml')

            link_tags = soup.select('p.d-sm-flex strong a.align-middle')
            self.logger.info(f"    -> 找到了 {len(link_tags)} 篇论文。")

            if limit:
                link_tags = link_tags[:limit]
                self.logger.info(f"    -> 应用限制：处理前 {limit} 篇论文。")

            pbar_desc = f"    -> 正在解析 {self.task_info.get('conference')} 页面"
            for link_tag in tqdm(link_tags, desc=pbar_desc, leave=True):
                details_url = urljoin(index_url, link_tag['href'])
                paper_data = self._scrape_details_page(details_url)
                if paper_data:
                    papers.append(paper_data)
                time.sleep(0.1)

            return papers

        except requests.exceptions.RequestException as e:
            self.logger.error(f"    [✖ ERROR] 获取 ACL 索引页失败: {e}")
            return []
        except Exception as e:
            self.logger.error(f"    [✖ ERROR] 解析 ACL 页面时发生未知错误: {e}", exc_info=True)
            return []

    def _scrape_details_page(self, url: str) -> Optional[Dict[str, Any]]:
        """抓取并解析 ACL 论文详情页。"""
        try:
            response = requests.get(url, headers=self.HEADERS, timeout=15)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'lxml')

            title_tag = soup.select_one("h2#title")
            title = title_tag.get_text(strip=True) if title_tag else "N/A"

            author_tags = soup.select("p.lead a")
            authors = ", ".join([a.get_text(strip=True) for a in author_tags]) if author_tags else "N/A"

            abstract_tag = soup.select_one("div.acl-abstract > span")
            abstract = abstract_tag.get_text(strip=True) if abstract_tag else "N/A"

            pdf_url_tag = soup.select_one('meta[name="citation_pdf_url"]')
            pdf_url = pdf_url_tag['content'] if pdf_url_tag else None
            if pdf_url and not pdf_url.startswith('http'):
                pdf_url = urljoin(url, pdf_url)

            paper_id = url.strip('/').split('/')[-1]

            return {
                'id': paper_id,
                'title': title,
                'authors': authors,
                'abstract': abstract,
                'pdf_url': pdf_url,
                'source_url': url
            }
        except Exception as e:
            self.logger.debug(f"    -> 解析 ACL 详情页失败 {url}: {e}")
            return None

==================== End of: src\scrapers\acl_scraper.py ====================



==================== Start of: src\scrapers\arxiv_scraper.py ====================

# FILE: src/scrapers/arxiv_scraper.py

import urllib.request
import urllib.parse
import xml.etree.ElementTree as ET
from typing import List, Dict, Any
import logging

from .base_scraper import BaseScraper


class ArxivScraper(BaseScraper):
    """Scraper for the arXiv API."""
    BASE_URL = 'http://export.arxiv.org/api/query?'

    def __init__(self, task_info: Dict[str, Any], logger: logging.Logger):
        super().__init__(task_info, logger)
        self.search_query = self.task_info.get('search_query', 'cat:cs.AI')
        self.limit = self.task_info.get('limit')
        self.max_results = self.limit if self.limit is not None else self.task_info.get('max_results', 10)
        self.sort_by = self.task_info.get('sort_by', 'submittedDate')
        self.sort_order = self.task_info.get('sort_order', 'descending')

    def _build_url(self) -> str:
        encoded_query = urllib.parse.quote(self.search_query)
        query_params = (f'search_query={encoded_query}&start=0&max_results={self.max_results}&'
                        f'sortBy={self.sort_by}&sortOrder={self.sort_order}')
        return self.BASE_URL + query_params

    def _parse_xml_entry(self, entry: ET.Element, ns: Dict[str, str]) -> Dict[str, Any]:
        def _get_text(element_name: str, namespace: str = 'atom'):
            element = entry.find(f'{namespace}:{element_name}', ns)
            return element.text.strip().replace('\n', ' ') if element is not None and element.text else None

        author_elements = entry.findall('atom:author', ns)
        authors_list = [author.find('atom:name', ns).text for author in author_elements if
                        author.find('atom:name', ns) is not None]

        pdf_url = None
        for link in entry.findall('atom:link', ns):
            if link.attrib.get('title') == 'pdf':
                pdf_url = link.attrib.get('href')
                break

        arxiv_id_url = _get_text('id')
        arxiv_id = arxiv_id_url.split('/abs/')[-1] if arxiv_id_url else "N/A"

        return {"id": arxiv_id, "title": _get_text('title'), "authors": ", ".join(authors_list),
                "abstract": _get_text('summary'), "pdf_url": pdf_url, "source_url": arxiv_id_url}

    def scrape(self) -> List[Dict[str, Any]]:
        full_url = self._build_url()
        self.logger.info(f"    -> Requesting data from arXiv: {self.search_query}")
        papers: List[Dict[str, Any]] = []
        try:
            with urllib.request.urlopen(full_url) as response:
                if response.status != 200:
                    self.logger.error(f"    [✖ ERROR] HTTP request to arXiv failed with status code: {response.status}")
                    return papers
                xml_data = response.read().decode('utf-8')
                ns = {'atom': 'http://www.w3.org/2005/Atom', 'arxiv': 'http://arxiv.org/schemas/atom'}
                root = ET.fromstring(xml_data)
                entries = root.findall('atom:entry', ns)
                for entry in entries:
                    papers.append(self._parse_xml_entry(entry, ns))
                return papers
        except Exception as e:
            self.logger.error(f"    [✖ ERROR] An unexpected error occurred during arXiv scraping: {e}", exc_info=True)
            return papers

==================== End of: src\scrapers\arxiv_scraper.py ====================



==================== Start of: src\scrapers\base_scraper.py ====================

# FILE: src/scrapers/base_scraper.py

from abc import ABC, abstractmethod
from typing import List, Dict, Any
import logging

class BaseScraper(ABC):
    """
    所有抓取器类的抽象基类。
    定义了所有具体抓取器必须遵循的接口。
    """

    def __init__(self, task_info: Dict[str, Any], logger: logging.Logger):
        """
        初始化抓取器。

        Args:
            task_info (Dict[str, Any]): 从 tasks.yaml 中读取并构建的特定任务配置。
            logger (logging.Logger): 从主程序传递过来的共享日志记录器。
        """
        self.task_info = task_info
        self.logger = logger

    @abstractmethod
    def scrape(self) -> List[Dict[str, Any]]:
        """
        执行抓取的核心方法。

        每个子类必须实现此方法，以执行其特定的抓取逻辑，
        并返回一个包含标准字典结构的论文列表。

        Returns:
            List[Dict[str, Any]]: 抓取到的论文信息列表。
        """
        raise NotImplementedError("每个 scraper 子类必须实现 scrape 方法。")

==================== End of: src\scrapers\base_scraper.py ====================



==================== Start of: src\scrapers\cvf_scraper.py ====================

# FILE: src/scrapers/cvf_scraper.py

import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from tqdm import tqdm
import time
from typing import List, Dict, Optional, Any

from .base_scraper import BaseScraper


class CvfScraper(BaseScraper):
    """专门用于 CVF (CVPR, ICCV) 网站的爬虫。"""
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    def scrape(self) -> List[Dict[str, Any]]:
        index_url = self.task_info["url"]
        limit = self.task_info.get("limit")
        papers = []

        self.logger.info(f"    -> 正在抓取 CVF 索引页: {index_url}")
        try:
            response = requests.get(index_url, headers=self.HEADERS, timeout=20)
            if response.status_code == 404:
                self.logger.warning(f"    -> 页面未找到 (404): {index_url}")
                return []
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'lxml')

            link_tags = soup.select('dt.ptitle > a[href$=".html"]')
            self.logger.info(f"    -> 找到了 {len(link_tags)} 篇论文。")

            if limit:
                link_tags = link_tags[:limit]
                self.logger.info(f"    -> 应用限制：处理前 {limit} 篇论文。")

            pbar_desc = f"    -> 正在解析 {self.task_info.get('conference')} 页面"
            for link_tag in tqdm(link_tags, desc=pbar_desc, leave=True):
                details_url = urljoin(index_url, link_tag['href'])
                paper_data = self._scrape_details_page(details_url)
                if paper_data:
                    papers.append(paper_data)
                time.sleep(0.1)

            return papers

        except requests.exceptions.RequestException as e:
            self.logger.error(f"    [✖ ERROR] 获取 CVF 索引页失败: {e}")
            return []
        except Exception as e:
            self.logger.error(f"    [✖ ERROR] 解析 CVF 页面时发生未知错误: {e}", exc_info=True)
            return []

    def _scrape_details_page(self, url: str) -> Optional[Dict[str, Any]]:
        """抓取并解析 CVF 论文详情页。"""
        try:
            response = requests.get(url, headers=self.HEADERS, timeout=15)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'lxml')

            title_tag = soup.select_one("#papertitle")
            title = title_tag.get_text(strip=True) if title_tag else "N/A"

            author_tags = soup.select("#authors > b > i")
            authors = ", ".join([a.get_text(strip=True) for a in author_tags]) if author_tags else "N/A"

            abstract_tag = soup.select_one("#abstract")
            abstract = abstract_tag.get_text(strip=True) if abstract_tag else "N/A"

            pdf_url_tag = soup.select_one('meta[name="citation_pdf_url"]')
            pdf_url = pdf_url_tag['content'] if pdf_url_tag else None
            if pdf_url and not pdf_url.startswith('http'):
                pdf_url = urljoin(url, pdf_url)

            paper_id = url.strip('/').split('/')[-1].replace('.html', '')

            return {
                'id': paper_id,
                'title': title,
                'authors': authors,
                'abstract': abstract,
                'pdf_url': pdf_url,
                'source_url': url
            }
        except Exception as e:
            self.logger.debug(f"    -> 解析 CVF 详情页失败 {url}: {e}")
            return None

==================== End of: src\scrapers\cvf_scraper.py ====================



==================== Start of: src\scrapers\iclr_scraper.py ====================

# FILE: src/scrapers/iclr_scraper.py

import openreview
import openreview.api
import re
import numpy as np
from tqdm import tqdm
from itertools import islice
import time
from typing import List, Dict, Any

from .base_scraper import BaseScraper


class IclrScraper(BaseScraper):
    """专门用于 ICLR (OpenReview) 的爬虫。"""

    def scrape(self) -> List[Dict[str, Any]]:
        api_version = self.task_info.get("api_version", "v2")
        venue_id = self.task_info["venue_id"]
        limit = self.task_info.get("limit")
        fetch_reviews = self.task_info.get("fetch_reviews", False)

        self.logger.info(f"    -> 使用 OpenReview API v{api_version} for venue: {venue_id}")
        if fetch_reviews:
            self.logger.info("    -> 已启用审稿信息获取。由于API速率限制，速度会变慢。")

        try:
            notes_list = []
            if api_version == "v1":
                client = openreview.Client(baseurl='https://api.openreview.net')
                notes_iterator = client.get_all_notes(content={'venueid': venue_id})
                notes_list = list(islice(notes_iterator, limit)) if limit else list(notes_iterator)
            else:  # API v2
                client = openreview.api.OpenReviewClient(baseurl='https://api2.openreview.net')
                notes_list = client.get_notes(content={'venueid': venue_id}, limit=limit) if limit else list(
                    client.get_all_notes(content={'venueid': venue_id}))

            if not notes_list:
                return []

            self.logger.info(f"    -> 找到了 {len(notes_list)} 份提交进行处理。")
            papers = []
            client_v2_for_reviews = openreview.api.OpenReviewClient(
                baseurl='https://api2.openreview.net') if fetch_reviews else None

            pbar_desc = f"    -> 正在解析 ICLR 论文"
            for note in tqdm(notes_list, desc=pbar_desc, leave=True):
                paper_details = self._parse_note(note)
                if fetch_reviews and client_v2_for_reviews:
                    time.sleep(0.3)
                    review_details = self._fetch_review_details(client_v2_for_reviews, note.id)
                    paper_details.update(review_details)
                papers.append(paper_details)
            return papers

        except Exception as e:
            self.logger.error(f"    [✖ ERROR] ICLR OpenReview 抓取失败: {e}", exc_info=True)
            return []

    def _parse_note(self, note: Any) -> Dict[str, Any]:
        """解析单个 OpenReview note 对象。"""
        content = note.content

        def get_field_robust(field_name, default_value):
            field_data = content.get(field_name)
            if isinstance(field_data, dict):
                return field_data.get('value', default_value)
            return field_data if field_data is not None else default_value

        return {
            'id': note.id,
            'title': get_field_robust('title', 'N/A'),
            'authors': ', '.join(get_field_robust('authors', [])),
            'abstract': get_field_robust('abstract', 'N/A'),
            'pdf_url': f"https://openreview.net/pdf?id={note.id}",
            'source_url': f"https://openreview.net/forum?id={note.id}"
        }

    def _fetch_review_details(self, client: openreview.api.OpenReviewClient, forum_id: str) -> Dict[str, Any]:
        """获取单个论文的审稿信息。"""
        ratings, decision = [], 'N/A'
        try:
            related_notes = client.get_notes(forum=forum_id)
            for note in related_notes:
                if any(re.search(r'/Decision', inv, re.IGNORECASE) for inv in note.invitations):
                    decision_value = note.content.get('decision', {}).get('value')
                    if decision_value: decision = str(decision_value)
                if any(re.search(r'/Review|/Official_Review', inv, re.IGNORECASE) for inv in note.invitations):
                    rating_val = note.content.get('rating', {}).get('value')
                    if isinstance(rating_val, str):
                        match = re.search(r'^\d+', rating_val)
                        if match: ratings.append(int(match.group(0)))
                    elif isinstance(rating_val, (int, float)):
                        ratings.append(int(rating_val))
        except Exception as e:
            self.logger.debug(f"获取审稿信息失败 forum_id={forum_id}: {e}")

        return {'decision': decision, 'avg_rating': round(np.mean(ratings), 2) if ratings else None,
                'review_ratings': ratings}

==================== End of: src\scrapers\iclr_scraper.py ====================



==================== Start of: src\scrapers\icml_scraper.py ====================

# FILE: src/scrapers/icml_scraper.py

import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
from tqdm import tqdm
from typing import List, Dict, Optional, Any
from bs4.element import Tag

from .base_scraper import BaseScraper


class IcmlScraper(BaseScraper):
    """专门用于 ICML (PMLR) 网站的爬虫。"""
    HEADERS = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
    }

    def scrape(self) -> List[Dict[str, Any]]:
        index_url = self.task_info["url"]
        limit = self.task_info.get("limit")
        papers = []

        self.logger.info(f"    -> 正在抓取 ICML 索引页: {index_url}")
        try:
            response = requests.get(index_url, headers=self.HEADERS, timeout=20)
            response.raise_for_status()
            soup = BeautifulSoup(response.content, 'lxml')

            paper_containers = soup.select('div.paper')
            self.logger.info(f"    -> 找到了 {len(paper_containers)} 篇论文。")

            if limit:
                paper_containers = paper_containers[:limit]
                self.logger.info(f"    -> 应用限制：处理前 {limit} 篇论文。")

            pbar_desc = f"    -> 正在解析 {self.task_info.get('conference')} 页面"
            for paper_div in tqdm(paper_containers, desc=pbar_desc, leave=True):
                paper_data = self._parse_paper_div(paper_div, index_url)
                if paper_data:
                    papers.append(paper_data)

            return papers

        except requests.exceptions.RequestException as e:
            self.logger.error(f"    [✖ ERROR] 获取 ICML 索引页失败: {e}")
            return []
        except Exception as e:
            self.logger.error(f"    [✖ ERROR] 解析 ICML 页面时发生未知错误: {e}", exc_info=True)
            return []

    def _parse_paper_div(self, paper_div: Tag, base_url: str) -> Optional[Dict[str, Any]]:
        """从单个 <div class="paper"> 中解析出所有信息。"""
        try:
            title_tag = paper_div.select_one('p.title')
            title = title_tag.get_text(strip=True) if title_tag else "N/A"

            authors_tag = paper_div.select_one('p.details span.authors')
            authors = authors_tag.get_text(strip=True).replace(';', ', ') if authors_tag else "N/A"

            links_p = paper_div.select_one('p.links')
            if not links_p:
                return None

            source_url_tag = links_p.select_one('a:contains("abs")')
            source_url = urljoin(base_url, source_url_tag['href']) if source_url_tag else 'N/A'

            pdf_url_tag = links_p.select_one('a:contains("Download PDF")')
            pdf_url = urljoin(base_url, pdf_url_tag['href']) if pdf_url_tag else 'N/A'

            paper_id = source_url.split('/')[-1].replace('.html', '') if source_url != 'N/A' else title
            abstract = "N/A (摘要需访问详情页)"

            return {
                'id': paper_id,
                'title': title,
                'authors': authors,
                'abstract': abstract,
                'pdf_url': pdf_url,
                'source_url': source_url
            }
        except Exception as e:
            self.logger.debug(f"    -> 从 ICML 容器解析失败: {e}")
            return None

==================== End of: src\scrapers\icml_scraper.py ====================



==================== Start of: src\scrapers\kdd_scraper.py ====================

# FILE: src/scrapers/kdd_scraper.py

import time
from typing import List, Dict, Any

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from webdriver_manager.chrome import ChromeDriverManager

from .base_scraper import BaseScraper


class KddScraper(BaseScraper):
    """专门用于 KDD 网站的爬虫 (使用 Selenium)。"""

    def scrape(self) -> List[Dict[str, Any]]:
        url = self.task_info["url"]
        limit = self.task_info.get("limit")

        # KDD 特定的选择器
        paper_link_selector = 'a.item-title'

        self.logger.info(f"    -> 正在启动 Selenium 访问 (KDD): {url}")
        driver = None
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument(
                'user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')

            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)

            driver.get(url)
            self.logger.info("    -> 页面已加载. 等待 10 秒以处理动态内容...")
            time.sleep(10)

            link_elements = driver.find_elements(By.CSS_SELECTOR, paper_link_selector)
            if not link_elements:
                self.logger.warning(f"    -> Selenium 未找到任何论文链接，使用的选择器是: '{paper_link_selector}'")
                return []

            self.logger.info(f"    -> 找到了 {len(link_elements)} 个潜在的论文链接。")
            if limit and len(link_elements) > limit:
                self.logger.info(f"    -> 应用限制：处理前 {limit} 个链接。")
                link_elements = link_elements[:limit]

            papers = []
            for i, link_elem in enumerate(link_elements):
                paper_url = link_elem.get_attribute('href')
                paper_title = link_elem.text
                if paper_url and paper_title:
                    papers.append({
                        'id': f"kdd_{self.task_info['year']}_{i}",
                        'title': paper_title.strip(),
                        'authors': 'N/A (KDD Selenium)',
                        'abstract': 'N/A (KDD Selenium)',
                        'pdf_url': None,
                        'source_url': paper_url
                    })
            return papers

        except Exception as e:
            self.logger.error(f"    [✖ ERROR] KDD Selenium 抓取失败 {url}: {e}", exc_info=True)
            return []
        finally:
            if driver:
                driver.quit()

==================== End of: src\scrapers\kdd_scraper.py ====================



==================== Start of: src\scrapers\neurips_scraper.py ====================

# FILE: src/scrapers/neurips_scraper.py

import openreview
import openreview.api
import re
import numpy as np
from tqdm import tqdm
from itertools import islice
import time
from typing import List, Dict, Any

from .base_scraper import BaseScraper


class NeuripsScraper(BaseScraper):
    """专门用于 NeurIPS (OpenReview) 的爬虫。"""

    def scrape(self) -> List[Dict[str, Any]]:
        api_version = self.task_info.get("api_version", "v2")
        venue_id = self.task_info["venue_id"]
        limit = self.task_info.get("limit")
        fetch_reviews = self.task_info.get("fetch_reviews", False)

        self.logger.info(f"    -> 使用 OpenReview API v{api_version} for venue: {venue_id}")
        if fetch_reviews:
            self.logger.info("    -> 已启用审稿信息获取。由于API速率限制，速度会变慢。")

        try:
            notes_list = []
            if api_version == "v1":
                client = openreview.Client(baseurl='https://api.openreview.net')
                notes_iterator = client.get_all_notes(content={'venueid': venue_id})
                notes_list = list(islice(notes_iterator, limit)) if limit else list(notes_iterator)
            else:  # API v2
                client = openreview.api.OpenReviewClient(baseurl='https://api2.openreview.net')
                notes_list = client.get_notes(content={'venueid': venue_id}, limit=limit) if limit else list(
                    client.get_all_notes(content={'venueid': venue_id}))

            if not notes_list:
                return []

            self.logger.info(f"    -> 找到了 {len(notes_list)} 份提交进行处理。")
            papers = []
            client_v2_for_reviews = openreview.api.OpenReviewClient(
                baseurl='https://api2.openreview.net') if fetch_reviews else None

            pbar_desc = f"    -> 正在解析 NeurIPS 论文"
            for note in tqdm(notes_list, desc=pbar_desc, leave=True):
                paper_details = self._parse_note(note)
                if fetch_reviews and client_v2_for_reviews:
                    time.sleep(0.3)
                    review_details = self._fetch_review_details(client_v2_for_reviews, note.id)
                    paper_details.update(review_details)
                papers.append(paper_details)
            return papers

        except Exception as e:
            self.logger.error(f"    [✖ ERROR] NeurIPS OpenReview 抓取失败: {e}", exc_info=True)
            return []

    def _parse_note(self, note: Any) -> Dict[str, Any]:
        """解析单个 OpenReview note 对象。"""
        content = note.content

        def get_field_robust(field_name, default_value):
            field_data = content.get(field_name)
            if isinstance(field_data, dict):
                return field_data.get('value', default_value)
            return field_data if field_data is not None else default_value

        return {
            'id': note.id,
            'title': get_field_robust('title', 'N/A'),
            'authors': ', '.join(get_field_robust('authors', [])),
            'abstract': get_field_robust('abstract', 'N/A'),
            'pdf_url': f"https://openreview.net/pdf?id={note.id}",
            'source_url': f"https://openreview.net/forum?id={note.id}"
        }

    def _fetch_review_details(self, client: openreview.api.OpenReviewClient, forum_id: str) -> Dict[str, Any]:
        """获取单个论文的审稿信息。"""
        ratings, decision = [], 'N/A'
        try:
            related_notes = client.get_notes(forum=forum_id)
            for note in related_notes:
                if any(re.search(r'/Decision', inv, re.IGNORECASE) for inv in note.invitations):
                    decision_value = note.content.get('decision', {}).get('value')
                    if decision_value: decision = str(decision_value)
                if any(re.search(r'/Review|/Official_Review', inv, re.IGNORECASE) for inv in note.invitations):
                    rating_val = note.content.get('rating', {}).get('value')
                    if isinstance(rating_val, str):
                        match = re.search(r'^\d+', rating_val)
                        if match: ratings.append(int(match.group(0)))
                    elif isinstance(rating_val, (int, float)):
                        ratings.append(int(rating_val))
        except Exception as e:
            self.logger.debug(f"获取审稿信息失败 forum_id={forum_id}: {e}")

        return {'decision': decision, 'avg_rating': round(np.mean(ratings), 2) if ratings else None,
                'review_ratings': ratings}

==================== End of: src\scrapers\neurips_scraper.py ====================



==================== Start of: src\scrapers\tpami_scraper.py ====================

# FILE: src/scrapers/tpami_scraper.py (API Version)

import requests
import json
from typing import List, Dict, Any
from tqdm import tqdm
import time

from .base_scraper import BaseScraper


class TpamiScraper(BaseScraper):
    """
    专门用于 IEEE TPAMI 期刊的爬虫 (使用后台 API)。
    这是一个更稳定、更高效的方案，取代了 Selenium。
    """
    BASE_URL = "https://ieeexplore.ieee.org"

    def _get_issue_number(self, punumber: str) -> str:
        """
        第一步: 调用 metadata API 获取最新的 'issueNumber'。
        这个 issueNumber 是获取论文列表的关键。
        """
        metadata_url = f"{self.BASE_URL}/rest/publication/home/metadata?pubid={punumber}"
        headers = {
            # 关键请求头，模拟从期刊主页发起的请求
            'Referer': f'{self.BASE_URL}/xpl/conhome/{punumber}/proceeding',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        self.logger.info(f"    -> 正在获取 issue number from: {metadata_url}")
        try:
            response = requests.get(metadata_url, headers=headers, timeout=20)
            response.raise_for_status()
            data = response.json()
            # issueNumber 可以是 'Early Access' 的 ID，也可以是最新一期的 ID
            issue_number = str(data['currentIssue']['issueNumber'])
            self.logger.info(f"    -> 成功获取 issue number: {issue_number}")
            return issue_number
        except Exception as e:
            self.logger.error(f"    [✖ ERROR] 获取 issue number 失败: {e}")
            return None

    def scrape(self) -> List[Dict[str, Any]]:
        punumber = self.task_info.get("punumber")
        if not punumber:
            self.logger.error("    [✖ ERROR] TPAMI task in YAML must have a 'punumber'. For TPAMI, it's '34'.")
            return []

        limit = self.task_info.get("limit")

        issue_number = self._get_issue_number(punumber)
        if not issue_number:
            return []

        papers = []
        page_number = 1
        total_records = 0
        total_pages = 1  # 先假设只有一页

        self.logger.info("    -> 开始逐页获取论文列表...")
        pbar = tqdm(total=total_records or limit or 25, desc=f"    -> Scraping TPAMI page {page_number}")

        while True:
            toc_url = f"{self.BASE_URL}/rest/search/pub/{punumber}/issue/{issue_number}/toc"
            payload = {
                "pageNumber": str(page_number),
                "punumber": str(punumber),
                "isnumber": str(issue_number)
            }
            headers = {
                'Referer': f'{self.BASE_URL}/xpl/conhome/{punumber}/proceeding?pageNumber={page_number}',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                'Content-Type': 'application/json;charset=UTF-8'
            }

            try:
                response = requests.post(toc_url, headers=headers, data=json.dumps(payload), timeout=20)
                response.raise_for_status()
                data = response.json()

                if page_number == 1:
                    total_records = data.get('totalRecords', 0)
                    total_pages = data.get('totalPages', 1)
                    pbar.total = limit if limit and limit < total_records else total_records
                    self.logger.info(f"    -> 共发现 {total_records} 篇论文，分布在 {total_pages} 页。")

                records = data.get('records', [])
                if not records:
                    self.logger.info("    -> 当前页没有更多论文，抓取结束。")
                    break

                for record in records:
                    papers.append({
                        'id': record.get('articleNumber', ''),
                        'title': record.get('highlightedTitle', 'N/A').replace('<br>', ' '),
                        'authors': ', '.join([author['name'] for author in record.get('authors', [])]),
                        'abstract': record.get('abstract', 'N/A'),
                        'pdf_url': f"请访问源页面查看PDF（可能需要订阅）",
                        'source_url': self.BASE_URL + record.get('documentLink', ''),
                        'conference': 'TPAMI'
                    })
                    pbar.update(1)
                    if limit and len(papers) >= limit:
                        break

                if (limit and len(papers) >= limit) or page_number >= total_pages:
                    break

                page_number += 1
                pbar.set_description(f"    -> Scraping TPAMI page {page_number}")
                time.sleep(1)  # 友好访问

            except Exception as e:
                self.logger.error(f"    [✖ ERROR] 在第 {page_number} 页抓取失败: {e}")
                break

        pbar.close()
        return papers

==================== End of: src\scrapers\tpami_scraper.py ====================



==================== Start of: src\scrapers\__init__.py ====================

# FILE: src/scrapers/__init__.py

# This file makes the 'scrapers' directory a Python package.

# END OF FILE: src/scrapers/__init__.py

==================== End of: src\scrapers\__init__.py ====================



==================== Start of: src\utils\console_logger.py ====================

# FILE: src/utils/console_logger.py (Banner Updated)

import logging
import sys

# 尝试导入 colorama，如果失败则优雅降级
try:
    import colorama
    from colorama import Fore, Style, Back

    colorama.init(autoreset=True)

    # 定义颜色常量
    COLORS = {
        'DEBUG': Style.DIM + Fore.WHITE,
        'INFO': Style.NORMAL + Fore.WHITE,
        'WARNING': Style.BRIGHT + Fore.YELLOW,
        'ERROR': Style.BRIGHT + Fore.RED,
        'CRITICAL': Style.BRIGHT + Back.RED + Fore.WHITE,
        'RESET': Style.RESET_ALL,

        # 自定义颜色，用于特殊高亮
        'BANNER_BLUE': Style.BRIGHT + Fore.BLUE,
        'BANNER_CYAN': Style.BRIGHT + Fore.CYAN,
        'BANNER_GREEN': Style.BRIGHT + Fore.GREEN,
        'BANNER_WHITE': Style.BRIGHT + Fore.WHITE,
        'PHASE': Style.BRIGHT + Fore.BLUE,
        'TASK_START': Style.BRIGHT + Fore.MAGENTA,
        'SUCCESS': Style.BRIGHT + Fore.GREEN,
        'STEP': Style.DIM + Fore.WHITE,
    }

    IS_COLORAMA_AVAILABLE = True

except ImportError:
    # 如果没有安装 colorama，则所有颜色代码都为空字符串
    COLORS = {key: '' for key in
              ['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL', 'RESET', 'BANNER_BLUE', 'BANNER_CYAN', 'BANNER_GREEN',
               'BANNER_WHITE', 'PHASE', 'TASK_START', 'SUCCESS',
               'STEP']}
    IS_COLORAMA_AVAILABLE = False


class ColoredFormatter(logging.Formatter):
    """
    一个自定义的日志格式化器，用于在控制台输出中添加颜色。
    """

    def __init__(self, fmt, datefmt=None, style='%'):
        super().__init__(fmt, datefmt, style)

    def format(self, record):
        # 获取原始的日志消息
        log_message = super().format(record)

        if IS_COLORAMA_AVAILABLE:
            # 根据日志级别应用不同的颜色
            level_color = COLORS.get(record.levelname, COLORS['INFO'])
            return f"{level_color}{log_message}{COLORS['RESET']}"
        else:
            return log_message


def print_banner():
    """打印项目启动的 ASCII Art 横幅，带有渐变色效果。"""
    banner_text = r"""
  ██████╗ ██╗   ██╗██████╗  ██████╗██████╗  ██╗      ██████╗ ██╗     ███████╗██████╗ 
  ██╔══██╗██║   ██║██╔══██╗██╔════╝██╔══██╗██║     ██╔═══██╗██║     ██╔════╝██╔══██╗
  ██████╔╝██║   ██║██████╔╝██║     ██████╔╝██║     ██║   ██║██║     █████╗  ██████╔╝
  ██╔═══╝ ██║   ██║██╔══██╗██║     ██╔═══╝ ██║     ██║   ██║██║     ██╔══╝  ██╔══██╗
  ██║     ╚██████╔╝██████╔╝╚██████╗██║     ███████╗╚██████╔╝███████╗███████╗██║  ██║
  ╚═╝      ╚═════╝ ╚═════╝  ╚═════╝╚═╝     ╚══════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝ 
"""
    if IS_COLORAMA_AVAILABLE:
        # 定义渐变色序列
        gradient_colors = [
            COLORS['BANNER_GREEN'],
            COLORS['BANNER_GREEN'],
            COLORS['BANNER_CYAN'],
            COLORS['BANNER_BLUE'],
            COLORS['BANNER_BLUE'],
            COLORS['BANNER_WHITE'],
        ]

        # 按行打印，并应用不同的颜色
        lines = banner_text.strip('\n').split('\n')
        # 确保 banner_text 前后的空行被正确处理
        print()  # 打印一个前置空行
        for i, line in enumerate(lines):
            # 使用 modulo 循环颜色
            color = gradient_colors[i % len(gradient_colors)]
            print(f"{color}{line}{COLORS['RESET']}")
        print()  # 打印一个后置空行

    else:
        # 如果 colorama 不可用，则打印无色版本
        print(banner_text)

==================== End of: src\utils\console_logger.py ====================



==================== Start of: src\utils\downloader.py ====================

# FILE: src/utils/downloader.py (Tqdm Removed Version)

import requests
import re
from pathlib import Path

from src.config import get_logger

logger = get_logger(__name__)

def download_single_pdf(paper: dict, pdf_dir: Path):
    """
    Downloads a single PDF file. This function is now designed to be called within a loop
    controlled by an external tqdm instance.
    """
    pdf_url = paper.get('pdf_url')
    title = paper.get('title', 'untitled')

    if not pdf_url:
        logger.warning(f"    -> Skipping download (no PDF URL): {title[:50]}...")
        return False

    sanitized_title = re.sub(r'[\\/*?:"<>|]', "", title).replace('\n', ' ').replace('\r', '')
    filename = (sanitized_title[:150] + ".pdf")
    filepath = pdf_dir / filename

    if filepath.exists():
        return True # Skip if already exists

    try:
        response = requests.get(pdf_url, stream=True, timeout=30, headers={'User-Agent': 'Mozilla/5.0'})
        response.raise_for_status()

        with open(filepath, 'wb') as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        return True
    except requests.exceptions.RequestException as e:
        logger.error(f"    [✖ ERROR] Failed to download {pdf_url}. Reason: {e}")
        if filepath.exists(): filepath.unlink() # Clean up failed download
        return False
    except Exception as e:
        logger.error(f"    [✖ ERROR] An unexpected error occurred for {pdf_url}. Reason: {e}")
        if filepath.exists(): filepath.unlink()
        return False

==================== End of: src\utils\downloader.py ====================



==================== Start of: src\utils\formatter.py ====================

# FILE: src/utils/formatter.py

import pandas as pd
from pathlib import Path
from datetime import datetime


def save_as_markdown(papers: list, task_name: str, output_dir: Path, wordcloud_path: str = None):
    """Saves a list of paper dictionaries as a formatted Markdown file."""
    if not papers:
        return

    timestamp = datetime.now().strftime("%Y-%m-%d")
    filename = output_dir / f"{task_name}_report_{timestamp}.md"

    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"# {task_name} Papers ({timestamp})\n\n")
        f.write(f"Total papers found matching criteria: **{len(papers)}**\n\n")

        if wordcloud_path:
            f.write(f"## Trend Word Cloud\n\n")
            # --- 修复点: 确保路径在Markdown中是正确的相对路径 ---
            f.write(f"![Word Cloud](./{Path(wordcloud_path).name})\n\n")

        f.write("---\n\n")

        for i, paper in enumerate(papers, 1):
            title = paper.get('title', 'N/A').replace('\n', ' ')

            # --- 修复点: 健壮地处理作者字段，无论是字符串还是列表 ---
            authors_data = paper.get('authors', 'N/A')
            if isinstance(authors_data, list):
                authors = ", ".join(authors_data)
            else:
                authors = str(authors_data)  # 确保是字符串
            authors = authors.replace('\n', ' ')

            abstract = paper.get('abstract', 'N/A').replace('\n', ' ')
            pdf_url = paper.get('pdf_url', '#')

            f.write(f"### {i}. {title}\n\n")
            f.write(f"**Authors:** *{authors}*\n\n")

            if pdf_url and pdf_url != '#':
                f.write(f"**[PDF Link]({pdf_url})**\n\n")

            f.write(f"**Abstract:**\n")
            f.write(f"> {abstract}\n\n")
            f.write("---\n\n")

    print(f"Successfully saved Markdown report to {filename}")


def save_as_summary_txt(papers: list, task_name: str, output_dir: Path):
    """Saves a list of paper dictionaries as a formatted TXT file."""
    if not papers:
        return

    timestamp = datetime.now().strftime("%Y-%m-%d")
    filename = output_dir / f"{task_name}_summary_{timestamp}.txt"

    with open(filename, 'w', encoding='utf-8') as f:
        f.write(f"--- {task_name} Summary ({timestamp}) ---\n")
        f.write(f"Total papers found: {len(papers)}\n")
        f.write("=" * 40 + "\n\n")

        for i, paper in enumerate(papers, 1):
            title = paper.get('title', 'N/A').replace('\n', ' ')

            authors_data = paper.get('authors', 'N/A')
            if isinstance(authors_data, list):
                authors = ", ".join(authors_data)
            else:
                authors = str(authors_data)
            authors = authors.replace('\n', ' ')

            abstract = paper.get('abstract', 'N/A').replace('\n', ' ')
            pdf_url = paper.get('pdf_url', 'N/A')

            f.write(f"[{i}] Title: {title}\n")
            f.write(f"    Authors: {authors}\n")
            f.write(f"    PDF URL: {pdf_url}\n")
            f.write(f"    Abstract: {abstract}\n\n")

    print(f"Successfully saved TXT summary to {filename}")


def save_as_csv(papers: list, task_name: str, output_dir: Path):
    """Saves a list of paper dictionaries as a CSV file."""
    if not papers:
        return

    timestamp = datetime.now().strftime("%Y%m%d")
    filename = output_dir / f"{task_name}_data_{timestamp}.csv"

    # --- 修复点: 在转换为DataFrame之前，确保所有列表都变成字符串 ---
    processed_papers = []
    for paper in papers:
        new_paper = paper.copy()
        for key, value in new_paper.items():
            if isinstance(value, list):
                new_paper[key] = ", ".join(map(str, value))
        processed_papers.append(new_paper)

    df = pd.DataFrame(processed_papers)

    cols = ['title', 'authors', 'abstract', 'pdf_url', 'keywords', 'source_url']
    df_cols = [c for c in cols if c in df.columns] + [c for c in df.columns if c not in cols]
    df = df[df_cols]

    df.to_csv(filename, index=False, encoding='utf-8-sig')
    print(f"Successfully saved CSV data to {filename}")

==================== End of: src\utils\formatter.py ====================



==================== Start of: src\utils\tqdm_logger.py ====================

# FILE: src/utils/tqdm_logger.py

import logging
from tqdm import tqdm

class TqdmLoggingHandler(logging.Handler):
    """
    一个自定义的日志处理器，它能将日志消息通过 tqdm.write() 输出，
    从而避免与 tqdm 进度条的显示发生冲突。
    """
    def __init__(self, level=logging.NOTSET):
        super().__init__(level)

    def emit(self, record):
        try:
            msg = self.format(record)
            # 使用 tqdm.write 来打印消息，它会自动处理换行，且不会干扰进度条
            tqdm.write(msg)
            self.flush()
        except Exception:
            self.handleError(record)

==================== End of: src\utils\tqdm_logger.py ====================

